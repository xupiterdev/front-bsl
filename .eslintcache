[{"C:\\apps\\web\\bsl\\front\\src\\index.js":"1","C:\\apps\\web\\bsl\\front\\src\\App.js":"2","C:\\apps\\web\\bsl\\front\\src\\reportWebVitals.js":"3","C:\\apps\\web\\bsl\\front\\src\\utils\\theme.util.js":"4","C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\index.reducer.js":"5","C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\session.reducer.js":"6","C:\\apps\\web\\bsl\\front\\src\\serviceWorkerRegistration.js":"7","C:\\apps\\web\\bsl\\front\\src\\utils\\api.util.js":"8","C:\\apps\\web\\bsl\\front\\src\\views\\session\\signIn.view.js":"9","C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\session.action.js":"10","C:\\apps\\web\\bsl\\front\\src\\routes\\index.route.js":"11","C:\\apps\\web\\bsl\\front\\src\\utils\\helper.util.js":"12","C:\\apps\\web\\bsl\\front\\src\\components\\BreadCrumbs.component.js":"13","C:\\apps\\web\\bsl\\front\\src\\views\\users\\allUsers.view.js":"14","C:\\apps\\web\\bsl\\front\\src\\views\\users\\addOrUpdateUser.view.js":"15","C:\\apps\\web\\bsl\\front\\src\\views\\modules\\allModules.view.js":"16","C:\\apps\\web\\bsl\\front\\src\\components\\Modal.componet.js":"17","C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\modules.reducer.js":"18","C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\modules.action.js":"19","C:\\apps\\web\\bsl\\front\\src\\components\\MenuButton.component.js":"20","C:\\apps\\web\\bsl\\front\\src\\components\\Loader.components.js":"21","C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\users.reducer.js":"22","C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\users.action.js":"23","C:\\apps\\web\\bsl\\front\\src\\views\\imports\\customerServices.view.js":"24","C:\\apps\\web\\bsl\\front\\src\\views\\imports\\addOrUpdateReference.view.js":"25"},{"size":1311,"mtime":1613095268091,"results":"26","hashOfConfig":"27"},{"size":404,"mtime":1612226259887,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1609954396578,"results":"29","hashOfConfig":"27"},{"size":907,"mtime":1612387447471,"results":"30","hashOfConfig":"27"},{"size":256,"mtime":1613064570077,"results":"31","hashOfConfig":"27"},{"size":418,"mtime":1609979746970,"results":"32","hashOfConfig":"27"},{"size":5064,"mtime":1609981623297,"results":"33","hashOfConfig":"27"},{"size":800,"mtime":1613167074647,"results":"34","hashOfConfig":"27"},{"size":5389,"mtime":1612830581704,"results":"35","hashOfConfig":"27"},{"size":1629,"mtime":1612466047454,"results":"36","hashOfConfig":"27"},{"size":9837,"mtime":1613091657246,"results":"37","hashOfConfig":"27"},{"size":914,"mtime":1612467324060,"results":"38","hashOfConfig":"27"},{"size":654,"mtime":1612387722258,"results":"39","hashOfConfig":"27"},{"size":2320,"mtime":1612830223160,"results":"40","hashOfConfig":"27"},{"size":16536,"mtime":1613065980980,"results":"41","hashOfConfig":"27"},{"size":16666,"mtime":1613087021016,"results":"42","hashOfConfig":"27"},{"size":732,"mtime":1612813600852,"results":"43","hashOfConfig":"27"},{"size":351,"mtime":1612807085262,"results":"44","hashOfConfig":"27"},{"size":3324,"mtime":1612827485211,"results":"45","hashOfConfig":"27"},{"size":791,"mtime":1612818783706,"results":"46","hashOfConfig":"27"},{"size":526,"mtime":1612904070471,"results":"47","hashOfConfig":"27"},{"size":341,"mtime":1613064582310,"results":"48","hashOfConfig":"27"},{"size":1411,"mtime":1613065931052,"results":"49","hashOfConfig":"27"},{"size":10869,"mtime":1613424654591,"results":"50","hashOfConfig":"27"},{"size":36999,"mtime":1613093846309,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"43vy27",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},"C:\\apps\\web\\bsl\\front\\src\\index.js",[],["106","107"],"C:\\apps\\web\\bsl\\front\\src\\App.js",[],"C:\\apps\\web\\bsl\\front\\src\\reportWebVitals.js",[],"C:\\apps\\web\\bsl\\front\\src\\utils\\theme.util.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\index.reducer.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\session.reducer.js",[],"C:\\apps\\web\\bsl\\front\\src\\serviceWorkerRegistration.js",[],"C:\\apps\\web\\bsl\\front\\src\\utils\\api.util.js",[],"C:\\apps\\web\\bsl\\front\\src\\views\\session\\signIn.view.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\session.action.js",[],"C:\\apps\\web\\bsl\\front\\src\\routes\\index.route.js",["108","109"],"import React, {useState, useEffect} from 'react'\r\nimport {Helmet} from 'react-helmet-async'\r\nimport {api} from '../utils/api.util'\r\nimport {setHeaderAXIOS} from '../utils/helper.util'\r\n\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    Typography,\r\n    Menu,\r\n    MenuItem,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Drawer,\r\n    Divider,\r\n    Collapse\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    Menu as MenuIcono,\r\n    AccountCircle,\r\n    Person\r\n} from '@material-ui/icons'\r\n\r\nimport { \r\n    // BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink\r\n} from \"react-router-dom\";\r\n\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {GetModule} from '../redux/actions/modules.action'\r\n\r\nimport {Loader} from '../components/Loader.components'\r\n\r\n// VISTAS\r\nimport AllUsers from '../views/users/allUsers.view'\r\nimport AddOrUpdateUser from '../views/users/addOrUpdateUser.view'\r\n\r\nimport AllModules from '../views/modules/allModules.view'\r\n\r\nimport CustomerServices from '../views/imports/customerServices.view'\r\nimport AddOrUpdateReference from '../views/imports/addOrUpdateReference.view'\r\n\r\nfunction RouteIndex(){\r\n    // VARIABLES\r\n    const [show, setShow] = useState({\r\n        userOptions : null,\r\n        menu : false,\r\n        loader : true\r\n    })\r\n\r\n    const {userData} = useSelector(state => state.Session)\r\n    const modules = useSelector(state => state.Modules.modules)\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    // FUNCTIONS\r\n    const toggle = (type, value) => setShow({...show, [type] : value})\r\n\r\n    const fetchModules = async () => {\r\n        try{\r\n            await dispatch(GetModule())\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const handleSignOut = async () => {\r\n        localStorage.clear()\r\n        // try{\r\n        //     await dispatch(SignOut)\r\n        // }catch(err){\r\n        //     console.log(err)\r\n        // }\r\n    }\r\n\r\n    setHeaderAXIOS();\r\n\r\n    useEffect(() => {\r\n        fetchModules()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        toggle(\"loader\", false)\r\n    }, [])\r\n\r\n    // RENDER\r\n    return(\r\n        <React.Fragment>\r\n            <Loader open={show.loader}/>\r\n            <Helmet>\r\n                <title>{api.NAME_APP} - Inicio</title>\r\n           </Helmet>\r\n           <AppBar position=\"sticky\">\r\n               <Toolbar variant=\"dense\">\r\n                    <IconButton color=\"inherit\" onClick={() => setShow({...show, menu : !show.menu})}>\r\n                       <MenuIcono />\r\n                    </IconButton>\r\n                    <Typography style={{flexGrow:1}}>BSL System</Typography>\r\n                    <div>\r\n                        <IconButton\r\n                            aria-label=\"Cuenta del usuario actual\"\r\n                            aria-controls=\"menu-appbar\"\r\n                            onClick={(event) => setShow({...show, userOptions : event.currentTarget})}\r\n                            color=\"inherit\"\r\n                        >\r\n                            <AccountCircle />&nbsp;{userData.name}\r\n                        </IconButton>\r\n                        <Menu\r\n                            id=\"menu-appbar\"\r\n                            anchorEl={show.userOptions}\r\n                            anchorOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            keepMounted\r\n                            transformOrigin={{\r\n                                vertical: 'top',\r\n                                horizontal: 'right',\r\n                            }}\r\n                            open={show.userOptions !== null ? true : false}\r\n                            onClose={() => setShow({...show, userOptions : null})}\r\n                        >\r\n                            <MenuItem onClick={() => setShow({...show, userOptions : null})}>Mi Perfil</MenuItem>\r\n                            <MenuItem onClick={handleSignOut}>Cerrar Sesion</MenuItem>\r\n                        </Menu>\r\n                    </div>\r\n               </Toolbar>\r\n           </AppBar>\r\n           <Drawer\r\n                className=\"drawer\"\r\n                anchor=\"left\"\r\n                open={show.menu}\r\n                onClick={() => setShow({...show, menu : !show.menu})}\r\n            >\r\n                    <div className=\"sidebar\">\r\n                        <List>\r\n                            <div className=\"sidebar-header text-center row align-items-center justify-content-center\">\r\n                                <div><Typography variant=\"h6\">Menu</Typography></div>\r\n                            </div>\r\n                            <Divider />\r\n                            {\r\n                                modules.map((module, i) => {\r\n                                    if(module.children.length !== 0){\r\n                                        let p = module.children.filter((c) => {\r\n                                            let ac = c._Action.map((a) => userData._Action.includes(a._id))\r\n                                            return ac.includes(true)\r\n                                        })\r\n                                        if(p.length !== 0){\r\n                                            let link = module.shortName.replace(\" \", \"-\")\r\n                                            return(\r\n                                                <div>\r\n                                                    <ListItem button component={NavLink} to=\"/s/users/all\" activeClassName=\"link-active\" key={i}>\r\n                                                        <ListItemIcon><Person /></ListItemIcon>\r\n                                                        <ListItemText primary={module.shortName}/>\r\n                                                    </ListItem>\r\n                                                    <Collapse in={true} timeout=\"auto\" unmountOnExit>\r\n                                                        <List component=\"div\" disablePadding>\r\n                                                            {\r\n                                                                module.children.map((c, x) => {\r\n                                                                    link += `/${c.shortName.replace(\" \", \"-\")}`\r\n                                                                    return(\r\n                                                                        <ListItem button component={NavLink} to={`/s/${link}`} activeClassName=\"link-active ml-1\" key={x}>\r\n                                                                            <ListItemIcon><Person /></ListItemIcon>\r\n                                                                            <ListItemText primary={c.shortName}/>\r\n                                                                    </ListItem>\r\n                                                                    )\r\n                                                                })\r\n                                                            }\r\n                                                        </List>\r\n                                                    </Collapse>\r\n                                                </div>\r\n                                            )\r\n                                        } \r\n                                    }else{\r\n                                        let ac = module._Action.map((a) => userData._Action.includes(a._id))\r\n\r\n                                        let link = module.shortName.replace(\" \", \"-\")\r\n                                            \r\n                                        if(ac.includes(true)){\r\n                                            return(<ListItem button component={NavLink} to={`/s/${link}`} activeClassName=\"link-active\" key={i}>\r\n                                                        <ListItemIcon><Person /></ListItemIcon>\r\n                                                        <ListItemText primary={module.shortName}/>\r\n                                                </ListItem>) \r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            {/* <ListItem button component={NavLink} to=\"/s/users/all\" activeClassName=\"link-active\">\r\n                                    <ListItemIcon><Person /></ListItemIcon>\r\n                                    <ListItemText primary=\"Usuarios\"/>\r\n                            </ListItem>\r\n                            <ListItem button component={NavLink} to=\"/s/modules/all\" activeClassName=\"link-active\">\r\n                                    <ListItemIcon><Person /></ListItemIcon>\r\n                                    <ListItemText primary=\"Modulos\"/>\r\n                            </ListItem> */}\r\n                        </List>\r\n                    </div>\r\n                </Drawer>\r\n                <div>\r\n                    <Switch>\r\n                        <Route exact path=\"/s/users/all\" render={(props) => <AllUsers {...props} />} />\r\n                        <Route exact path=\"/s/users/add-user\" render={(props) => <AddOrUpdateUser {...props} />} />\r\n                        \r\n                        <Route exact path=\"/s/modules/all\" render={(props) => <AllModules {...props} />} />\r\n\r\n                        <Route exact path=\"/s/importacion/atencion-cliente\" render={(props) => <CustomerServices {...props}/> } />\r\n                        <Route exact path=\"/s/importacion/atencion-cliente/agregar-referencia\" render={(props) => <AddOrUpdateReference {...props}/> } />\r\n                    </Switch>\r\n                </div>\r\n           </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default RouteIndex;","C:\\apps\\web\\bsl\\front\\src\\utils\\helper.util.js",[],"C:\\apps\\web\\bsl\\front\\src\\components\\BreadCrumbs.component.js",[],"C:\\apps\\web\\bsl\\front\\src\\views\\users\\allUsers.view.js",[],"C:\\apps\\web\\bsl\\front\\src\\views\\users\\addOrUpdateUser.view.js",["110","111"],"import React,  {useState, useEffect, useCallback} from 'react'\r\nimport {Helmet} from 'react-helmet-async'\r\nimport {api} from '../../utils/api.util'\r\n\r\nimport {BreadCrumbs} from '../../components/BreadCrumbs.component'\r\n\r\nimport {\r\n    Typography,\r\n    FormControl,\r\n    FormHelperText,\r\n    TextField,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Checkbox,\r\n    Collapse,\r\n    Button,\r\n    CircularProgress\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    Visibility, \r\n    VisibilityOff,\r\n    ExpandLess,\r\n    ExpandMore \r\n} from '@material-ui/icons'\r\n\r\nimport {Loader} from '../../components/Loader.components'\r\n\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nimport {useForm} from 'react-hook-form'\r\n\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {GetModule} from '../../redux/actions/modules.action'\r\nimport {SignUp} from '../../redux/actions/users.action'\r\n\r\nfunction AddOrUpdateUser({history, ...props}){\r\n    // VARIABLES\r\n    const [show, setShow] = useState({\r\n        password : false,\r\n        loader : true,\r\n        isCorrect : true,\r\n        load : false\r\n    })\r\n    const [permissions, setPermissions] =  useState([])\r\n    const {handleSubmit, errors, register} = useForm()\r\n    const dispatch = useDispatch()\r\n    const modules = useSelector(state => state.Modules.modules)\r\n\r\n    // FUNCTIONS\r\n    const toggle = (type, value) => setShow({...show, [type] : value})\r\n\r\n    const generateUser = (value) => { \r\n        let name1 = value.split(\" \")\r\n        document.getElementById(\"user\").value = `${name1[0]}${value.length + Math.floor(Math.random() * (0 - 9) + 9)}${Math.floor(Math.random() * (1 - 999) + 999)}`\r\n    }\r\n\r\n    const fetchModules = async () => {\r\n        try{\r\n            await dispatch(GetModule())\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const addPermissionsToState = (_id) => {\r\n        let currentPermissions = permissions;\r\n\r\n        if(currentPermissions.includes(_id))currentPermissions.splice(permissions.indexOf(_id), 1);\r\n        else currentPermissions.push(_id)\r\n        \r\n        setPermissions(currentPermissions);\r\n    }\r\n\r\n    const  handleAddOrUpdateUser = (data) => {\r\n        if(permissions.length === 0){\r\n            return toggle(\"isCorrect\", false)\r\n        }\r\n\r\n        toggle(\"isCorrect\", true)\r\n\r\n        try{\r\n            data._Action = permissions\r\n            dispatch(SignUp(data, {\r\n                toggle,\r\n                goBack : history.goBack\r\n            }))\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchModules()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        toggle(\"loader\", false)\r\n    }, [])\r\n\r\n    // RENDER\r\n    return(\r\n        <React.Fragment>\r\n            <Loader open={show.loader}/>\r\n            <Helmet>\r\n                <title>{api.NAME_APP} - Registrar nuevo usuario</title>\r\n           </Helmet>\r\n           <div id=\"addOrUpdateUser\" className=\"py-1\">\r\n               <div className=\"container\">\r\n                    {/* title */}\r\n                    <BreadCrumbs\r\n                        title=\"Registrar nuevo usuario\"\r\n                    >\r\n                        <Typography>Usuarios</Typography>\r\n                        <NavLink className=\"link\" color=\"inherit\" to=\"/s/users/all\">Todos los usuarios</NavLink>\r\n                        <Typography>Registrar usuario</Typography>\r\n                    </BreadCrumbs>\r\n                    {/* Formulario de registro */}\r\n                    <div className=\"row row justify-content-center align-items-md-center\">\r\n                        <form className=\"col-md-8\" onSubmit={handleSubmit(handleAddOrUpdateUser)}>\r\n                            <div className=\"back\">\r\n                                <Typography variant=\"subtitle1\" className=\"text-center\">Datos de usuario</Typography><Divider />\r\n                                <div className=\"row mt-1\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Nombres\"\r\n                                                id=\"name\"\r\n                                                name=\"name\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.name !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el nombre\"},\r\n                                                    pattern : {value : /^[a-zA-Z ]+$/, message : \"Solo puedes introducir letras.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.name?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Apellidos\"\r\n                                                id=\"lastname\"\r\n                                                name=\"lastname\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                error={errors.lastname !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir los apellidos\"},\r\n                                                    pattern : {value : /^[a-zA-Z ]+$/, message : \"Solo puedes introducir letras.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.lastname?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Puesto de trabajo\"\r\n                                                id=\"jobPosition\"\r\n                                                name=\"jobPosition\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors.jobPosition !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir los apellidos del usuario\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?.jobPosition?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div> \r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Usuario\"\r\n                                                id=\"user\"\r\n                                                name=\"user\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                InputProps={{\r\n                                                    readOnly: true,\r\n                                                }}\r\n                                                defaultValue=\"---------------------\"\r\n                                                error={errors.user !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el usuario\"},\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.user?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                id=\"password\"\r\n                                                name=\"password\"\r\n                                                type={show.password ? \"text\" : \"password\"} \r\n                                                label=\"Contraseña\" \r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir una contraseña\"},\r\n                                                    pattern : {value : /^[a-zA-Z 0-9]+$/, message : \"Solo puedes introducir letra minuscula, letra mayuscula y numeros\"},\r\n                                                    minLength : {value : 8, message : \"Tu contraseña debe de incluir por lo menos 8 caracteres\"},\r\n                                                    maxLength : {value : 16, message : \"Tu contraseña dee de incluir por lo maximo  16  caracteres\"}\r\n                                                })}\r\n                                                error={errors.password !== undefined ? true : false}\r\n                                                InputProps={{\r\n                                                    endAdornment : (\r\n                                                        <InputAdornment style={{cursor:\"pointer\"}} onClick={() => setShow({...show, password : !show.password})}>\r\n                                                            {show.password ? <VisibilityOff/> : <Visibility/>}\r\n                                                        </InputAdornment>\r\n                                                    )\r\n                                                }}/>\r\n                                            <FormHelperText className=\"text-danger\">{errors?.password?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"back mt-2\">\r\n                                <Typography variant=\"subtitle1\" className=\"text-center\">Permisos</Typography><Divider />\r\n                                <div className=\"col-12 text-center\">\r\n                                    {show.isCorrect === false &&  <FormHelperText className=\"text-danger text-center\">Debes de agregar los permisos</FormHelperText>}\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <Lista \r\n                                        datas={modules}\r\n                                        add={addPermissionsToState}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {show.load && <div className=\"text-center mt-1\"><CircularProgress/></div>}\r\n                            <div className=\"col-12 text-center mt-1\">\r\n                                <Button\r\n                                    onClick={() => history.goBack()}\r\n                                    className=\" mr-1\"\r\n                                >\r\n                                    Volver\r\n                                </Button>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    className=\"btn-success\"\r\n                                    disabled={show.load}\r\n                                >\r\n                                    Guardar\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n               </div>\r\n           </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddOrUpdateUser;\r\n\r\nfunction Lista({datas, add}){\r\n    return(\r\n        <List>\r\n            {datas.map((data, i) => {\r\n                return(<ListaSimple index={i} datas={data} key={data._id} add={add}/>)\r\n            })}\r\n        </List>\r\n    )\r\n}\r\n\r\nfunction ListaSimple({datas, index, add}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    return(\r\n        <>\r\n            <ListItem button onClick={() => setIsOpen(!isOpen)} key={`a-${index}`}>\r\n                <ListItemText id={datas._id} primary={datas.name} />\r\n                {datas.children.length !== 0 && (isOpen ? <ExpandLess /> : <ExpandMore />)}\r\n                {datas._Action.length !== 0 && (isOpen ? <ExpandLess /> : <ExpandMore />)}\r\n            </ListItem>\r\n            {datas.children.length !== 0 && <ListaCollapse datas={datas.children} open={isOpen} add={add}/>}\r\n            {datas._Action.length !== 0 && <ListaCollapse datas={datas._Action} open={isOpen} isAction={true} add={add}/>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction ListaAction({datas, index, add}){\r\n    const [checked, setChecked] = React.useState([0]); \r\n    const handleToggle = (value) => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n        \r\n        setChecked(newChecked);\r\n    };\r\n    return(\r\n        <>\r\n            <ListItem button onClick={() => {\r\n                handleToggle(index)\r\n                add(datas._id)\r\n            }}>\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        edge=\"start\"\r\n                        checked={checked.indexOf(index) !== -1}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                        inputProps={{ 'aria-labelledby': datas._id }}\r\n                    />\r\n                </ListItemIcon>\r\n                <ListItemText id={datas._id} primary={datas.name} secondary={datas.description}/>\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nvar count = -1\r\nfunction ListaCollapse({datas, open, isAction, add}){\r\n    return(\r\n        <>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding className=\"ml-1\">\r\n                {\r\n                    datas.map((data, i) => {\r\n                        if(isAction)return(<ListaAction datas={data} index={count++} key={data._id} add={add}/>)\r\n                        else return(<ListaSimple datas={data} index={i} key={data._id} add={add}/>)\r\n                    })\r\n                }\r\n                </List> \r\n            </Collapse>\r\n        </>\r\n        \r\n    )\r\n}","C:\\apps\\web\\bsl\\front\\src\\views\\modules\\allModules.view.js",[],"C:\\apps\\web\\bsl\\front\\src\\components\\Modal.componet.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\modules.reducer.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\modules.action.js",[],"C:\\apps\\web\\bsl\\front\\src\\components\\MenuButton.component.js",[],"C:\\apps\\web\\bsl\\front\\src\\components\\Loader.components.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\reducers\\users.reducer.js",[],"C:\\apps\\web\\bsl\\front\\src\\redux\\actions\\users.action.js",[],"C:\\apps\\web\\bsl\\front\\src\\views\\imports\\customerServices.view.js",["112","113","114","115","116","117","118","119","120","121","122"],"C:\\apps\\web\\bsl\\front\\src\\views\\imports\\addOrUpdateReference.view.js",["123","124","125","126","127","128","129","130","131"],"import React,  {useState, useEffect, useCallback} from 'react'\r\nimport {Helmet} from 'react-helmet-async'\r\nimport {api} from '../../utils/api.util'\r\n\r\nimport {BreadCrumbs} from '../../components/BreadCrumbs.component'\r\n\r\nimport {\r\n    Typography,\r\n    FormControl,\r\n    FormHelperText,\r\n    TextField,\r\n    Divider,\r\n    InputAdornment,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Checkbox,\r\n    Collapse,\r\n    Button,\r\n    CircularProgress\r\n} from '@material-ui/core'\r\n\r\nimport {\r\n    Visibility, \r\n    VisibilityOff,\r\n    ExpandLess,\r\n    ExpandMore \r\n} from '@material-ui/icons'\r\n\r\nimport {Loader} from '../../components/Loader.components'\r\n\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nimport {useForm} from 'react-hook-form'\r\n\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nimport {GetModule} from '../../redux/actions/modules.action'\r\nimport {SignUp} from '../../redux/actions/users.action'\r\n\r\nfunction AddOrUpdateReference({history, ...props}){\r\n    // VARIABLES\r\n    const [show, setShow] = useState({\r\n        password : false,\r\n        loader : true,\r\n        isCorrect : true,\r\n        load : false\r\n    })\r\n    const [permissions, setPermissions] =  useState([])\r\n    const {handleSubmit, errors, register} = useForm()\r\n    const dispatch = useDispatch()\r\n    const modules = useSelector(state => state.Modules.modules)\r\n\r\n    // FUNCTIONS\r\n    const toggle = (type, value) => setShow({...show, [type] : value})\r\n\r\n    const generateUser = (value) => { \r\n        let name1 = value.split(\" \")\r\n        document.getElementById(\"user\").value = `${name1[0]}${value.length + Math.floor(Math.random() * (0 - 9) + 9)}${Math.floor(Math.random() * (1 - 999) + 999)}`\r\n    }\r\n\r\n    const fetchModules = async () => {\r\n        try{\r\n            await dispatch(GetModule())\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const addPermissionsToState = (_id) => {\r\n        let currentPermissions = permissions;\r\n\r\n        if(currentPermissions.includes(_id))currentPermissions.splice(permissions.indexOf(_id), 1);\r\n        else currentPermissions.push(_id)\r\n        \r\n        setPermissions(currentPermissions);\r\n    }\r\n\r\n    const  handleAddOrUpdateUser = (data) => {\r\n        if(permissions.length === 0){\r\n            return toggle(\"isCorrect\", false)\r\n        }\r\n\r\n        toggle(\"isCorrect\", true)\r\n\r\n        try{\r\n            data._Action = permissions\r\n            dispatch(SignUp(data, {\r\n                toggle,\r\n                goBack : history.goBack\r\n            }))\r\n        }catch(err){\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchModules()\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        toggle(\"loader\", false)\r\n    }, [])\r\n\r\n    // RENDER\r\n    return(\r\n        <React.Fragment>\r\n            <Loader open={show.loader}/>\r\n            <Helmet>\r\n                <title>{api.NAME_APP} - Registrar nueva referencia</title>\r\n           </Helmet>\r\n           <div id=\"addOrUpdateUser\" className=\"py-1\">\r\n               <div className=\"container\">\r\n                    {/* title */}\r\n                    <BreadCrumbs\r\n                        title=\"Registrar nueva  referencia\"\r\n                    >\r\n                        <Typography>Importacion</Typography>\r\n                        <Typography className=\"link\" onClick={() => history.goBack()}>Atencion a clientes</Typography>\r\n                        <Typography>Registrar referencia</Typography>\r\n                    </BreadCrumbs>\r\n                    {/* Formulario de registro */}\r\n                    <div className=\"row row justify-content-center align-items-md-center\">\r\n                        <form className=\"col-md-8\" onSubmit={handleSubmit(handleAddOrUpdateUser)}>\r\n                            <div className=\"back\">\r\n                                <Typography variant=\"subtitle1\" className=\"text-center\">Datos de referencia</Typography><Divider />\r\n                                <div className=\"row mt-1\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Referencia\"\r\n                                                id=\"reference\"\r\n                                                name=\"reference\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.reference !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir una referencia\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.reference?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        {/* fecha */}\r\n                                        <FormControl> \r\n                                            <TextField \r\n                                                label=\"Recepción de documentos\"\r\n                                                id=\"documentsReception\"\r\n                                                name=\"documentsReception\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                // type=\"date\"\r\n                                                error={errors.documentsReception !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una fecha\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.documentsReception?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div> \r\n                                    <div className=\"col-md-6\">\r\n                                        {/* select */}\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Cliente\"\r\n                                                id=\"_CatCliente\"\r\n                                                name=\"_CatCliente\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatCliente !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar un cliente\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatCliente?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Tipo de operacion\"\r\n                                                id=\"_CatTypeOperation\"\r\n                                                name=\"_CatTypeOperation\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatTypeOperation !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar un tipo de operacion\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatTypeOperation?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Tipo de mercancia\"\r\n                                                id=\"_CatTypeMerchandise\"\r\n                                                name=\"_CatTypeMerchandise\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatTypeMerchandise !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar un tipo de mercancia\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatTypeMerchandise?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Aduana\"\r\n                                                id=\"_CatLogisticOperator\"\r\n                                                name=\"_CatLogisticOperator\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatLogisticOperator !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una aduana\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatLogisticOperator?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Oficina comercial\"\r\n                                                id=\"_CatCommercialOffice\"\r\n                                                name=\"_CatCommercialOffice\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatCommercialOffice !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una oficina comercial\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatCommercialOffice?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Contenedor\"\r\n                                                id=\"container\"\r\n                                                name=\"container\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.container !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir un contenedor\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.container?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Referencia de contenedor\"\r\n                                                id=\"containerReference\"\r\n                                                name=\"containerReference\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.containerReference !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir la referencia de contenedor\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.containerReference?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"B/M\"\r\n                                                id=\"BM\"\r\n                                                name=\"BM\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.BM !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el B/M\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.BM?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"BL\"\r\n                                                id=\"BL\"\r\n                                                name=\"BL\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.BL !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el BL\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.BL?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Naviera\"\r\n                                                id=\"_CatShipowner\"\r\n                                                name=\"_CatShipowner\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatShipowner !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una naviera\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatShipowner?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Puerto de origen\"\r\n                                                id=\"portOfOrigin\"\r\n                                                name=\"portOfOrigin\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.portOfOrigin !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el puerto de origen\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.portOfOrigin?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Flete maritimo\"\r\n                                                id=\"seaFreight\"\r\n                                                name=\"seaFreight\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                onChange={(e) => generateUser(e.target.value)}\r\n                                                error={errors.seaFreight !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de introducir el flete maritimo\"},\r\n                                                    pattern : {value : /^[a-zA-Z0-9 ]+$/, message : \"Solo puedes introducir letras y numeros.\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.seaFreight?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Ejecutivo\"\r\n                                                id=\"_Executive\"\r\n                                                name=\"_Executive\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._Executive !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una ejecutivo\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._Executive?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"back mt-2\">\r\n                                <Typography variant=\"subtitle1\" className=\"text-center\">Datos de documentos</Typography><Divider />\r\n                                <div className=\"row mt-1\">\r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Proveedor / Cliente\"\r\n                                                id=\"_CatProvider\"\r\n                                                name=\"_CatProvider\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatProvider !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar un provedor / cliente\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatProvider?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        {/* select */}\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Mercancia\"\r\n                                                id=\"_CatCommodity\"\r\n                                                name=\"_CatCommodity\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatCommodity !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar la mercancia\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatCommodity?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                    <div className=\"col-md-6\">\r\n                                        {/* fecha */}\r\n                                        <FormControl> \r\n                                            <TextField \r\n                                                label=\"ETA\"\r\n                                                id=\"ETA\"\r\n                                                name=\"ETA\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                // type=\"date\"\r\n                                                error={errors.ETA !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una fecha\"}\r\n                                                })}\r\n                                            />\r\n                                            <FormHelperText className=\"text-danger\">{errors?.ETA?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div> \r\n                                    <div className=\"col-md-6\">\r\n                                        <FormControl>\r\n                                            <TextField \r\n                                                label=\"Patente\"\r\n                                                id=\"_CatPatent\"\r\n                                                name=\"_CatPatent\"\r\n                                                variant=\"outlined\"\r\n                                                size=\"small\"\r\n                                                select\r\n                                                error={errors._CatPatent !== undefined ? true : false}\r\n                                                inputRef={register({\r\n                                                    required : {value : true, message : \"Debes de seleccionar una patente\"}\r\n                                                })}\r\n                                                SelectProps={{native: true}}\r\n                                            >\r\n                                                <option value=\"Super usuario\">Super usuario</option>\r\n                                                <option value=\"Jefe de area\">Jefe de area</option>\r\n                                                <option value=\"Ejecutivo\">Ejecutivo</option>\r\n                                            </TextField>\r\n                                            <FormHelperText className=\"text-danger\">{errors?._CatPatent?.message}</FormHelperText>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            {show.load && <div className=\"text-center mt-1\"><CircularProgress/></div>}\r\n                            <div className=\"col-12 text-center mt-1\">\r\n                                <Button\r\n                                    onClick={() => history.goBack()}\r\n                                    className=\" mr-1\"\r\n                                >\r\n                                    Volver\r\n                                </Button>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    type=\"submit\"\r\n                                    className=\"btn-success\"\r\n                                    disabled={show.load}\r\n                                >\r\n                                    Guardar\r\n                                </Button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n               </div>\r\n           </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default AddOrUpdateReference;\r\n\r\nfunction Lista({datas, add}){\r\n    return(\r\n        <List>\r\n            {datas.map((data, i) => {\r\n                return(<ListaSimple index={i} datas={data} key={data._id} add={add}/>)\r\n            })}\r\n        </List>\r\n    )\r\n}\r\n\r\nfunction ListaSimple({datas, index, add}){\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    return(\r\n        <>\r\n            <ListItem button onClick={() => setIsOpen(!isOpen)} key={`a-${index}`}>\r\n                <ListItemText id={datas._id} primary={datas.name} />\r\n                {datas.children.length !== 0 && (isOpen ? <ExpandLess /> : <ExpandMore />)}\r\n                {datas._Action.length !== 0 && (isOpen ? <ExpandLess /> : <ExpandMore />)}\r\n            </ListItem>\r\n            {datas.children.length !== 0 && <ListaCollapse datas={datas.children} open={isOpen} add={add}/>}\r\n            {datas._Action.length !== 0 && <ListaCollapse datas={datas._Action} open={isOpen} isAction={true} add={add}/>}\r\n        </>\r\n    )\r\n}\r\n\r\nfunction ListaAction({datas, index, add}){\r\n    const [checked, setChecked] = React.useState([0]); \r\n    const handleToggle = (value) => {\r\n        const currentIndex = checked.indexOf(value);\r\n        const newChecked = [...checked];\r\n\r\n        if (currentIndex === -1) {\r\n            newChecked.push(value);\r\n        } else {\r\n            newChecked.splice(currentIndex, 1);\r\n        }\r\n        \r\n        setChecked(newChecked);\r\n    };\r\n    return(\r\n        <>\r\n            <ListItem button onClick={() => {\r\n                handleToggle(index)\r\n                add(datas._id)\r\n            }}>\r\n                <ListItemIcon>\r\n                    <Checkbox\r\n                        edge=\"start\"\r\n                        checked={checked.indexOf(index) !== -1}\r\n                        tabIndex={-1}\r\n                        disableRipple\r\n                        inputProps={{ 'aria-labelledby': datas._id }}\r\n                    />\r\n                </ListItemIcon>\r\n                <ListItemText id={datas._id} primary={datas.name} secondary={datas.description}/>\r\n            </ListItem>\r\n        </>\r\n    )\r\n}\r\n\r\nvar count = -1\r\nfunction ListaCollapse({datas, open, isAction, add}){\r\n    return(\r\n        <>\r\n            <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding className=\"ml-1\">\r\n                {\r\n                    datas.map((data, i) => {\r\n                        if(isAction)return(<ListaAction datas={data} index={count++} key={data._id} add={add}/>)\r\n                        else return(<ListaSimple datas={data} index={i} key={data._id} add={add}/>)\r\n                    })\r\n                }\r\n                </List> \r\n            </Collapse>\r\n        </>\r\n        \r\n    )\r\n}",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":88,"column":8,"nodeType":"138","endLine":88,"endColumn":10,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":146,"column":57,"nodeType":"142","messageId":"143","endLine":146,"endColumn":59},{"ruleId":"144","severity":1,"message":"145","line":1,"column":38,"nodeType":"146","messageId":"147","endLine":1,"endColumn":49},{"ruleId":"136","severity":1,"message":"137","line":101,"column":8,"nodeType":"138","endLine":101,"endColumn":10,"suggestions":"148"},{"ruleId":"144","severity":1,"message":"149","line":9,"column":5,"nodeType":"146","messageId":"147","endLine":9,"endColumn":16},{"ruleId":"144","severity":1,"message":"150","line":10,"column":5,"nodeType":"146","messageId":"147","endLine":10,"endColumn":19},{"ruleId":"144","severity":1,"message":"151","line":12,"column":5,"nodeType":"146","messageId":"147","endLine":12,"endColumn":12},{"ruleId":"144","severity":1,"message":"152","line":13,"column":5,"nodeType":"146","messageId":"147","endLine":13,"endColumn":19},{"ruleId":"144","severity":1,"message":"153","line":14,"column":5,"nodeType":"146","messageId":"147","endLine":14,"endColumn":9},{"ruleId":"144","severity":1,"message":"154","line":15,"column":5,"nodeType":"146","messageId":"147","endLine":15,"endColumn":13},{"ruleId":"144","severity":1,"message":"155","line":16,"column":5,"nodeType":"146","messageId":"147","endLine":16,"endColumn":17},{"ruleId":"144","severity":1,"message":"156","line":17,"column":5,"nodeType":"146","messageId":"147","endLine":17,"endColumn":17},{"ruleId":"144","severity":1,"message":"157","line":18,"column":5,"nodeType":"146","messageId":"147","endLine":18,"endColumn":13},{"ruleId":"144","severity":1,"message":"158","line":19,"column":5,"nodeType":"146","messageId":"147","endLine":19,"endColumn":13},{"ruleId":"144","severity":1,"message":"159","line":21,"column":5,"nodeType":"146","messageId":"147","endLine":21,"endColumn":21},{"ruleId":"144","severity":1,"message":"145","line":1,"column":38,"nodeType":"146","messageId":"147","endLine":1,"endColumn":49},{"ruleId":"144","severity":1,"message":"152","line":13,"column":5,"nodeType":"146","messageId":"147","endLine":13,"endColumn":19},{"ruleId":"144","severity":1,"message":"160","line":25,"column":5,"nodeType":"146","messageId":"147","endLine":25,"endColumn":15},{"ruleId":"144","severity":1,"message":"161","line":26,"column":5,"nodeType":"146","messageId":"147","endLine":26,"endColumn":18},{"ruleId":"144","severity":1,"message":"162","line":33,"column":9,"nodeType":"146","messageId":"147","endLine":33,"endColumn":16},{"ruleId":"144","severity":1,"message":"163","line":52,"column":11,"nodeType":"146","messageId":"147","endLine":52,"endColumn":18},{"ruleId":"144","severity":1,"message":"164","line":70,"column":11,"nodeType":"146","messageId":"147","endLine":70,"endColumn":32},{"ruleId":"136","severity":1,"message":"137","line":101,"column":8,"nodeType":"138","endLine":101,"endColumn":10,"suggestions":"165"},{"ruleId":"144","severity":1,"message":"166","line":544,"column":10,"nodeType":"146","messageId":"147","endLine":544,"endColumn":15},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchModules' and 'toggle'. Either include them or remove the dependency array.","ArrayExpression",["169"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar",["170"],"'FormControl' is defined but never used.","'FormHelperText' is defined but never used.","'Divider' is defined but never used.","'InputAdornment' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'Checkbox' is defined but never used.","'Collapse' is defined but never used.","'CircularProgress' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'NavLink' is defined but never used.","'modules' is assigned a value but never used.","'addPermissionsToState' is assigned a value but never used.",["171"],"'Lista' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"172","fix":"174"},{"desc":"172","fix":"175"},"Update the dependencies array to be: [fetchModules, toggle]",{"range":"176","text":"177"},{"range":"178","text":"177"},{"range":"179","text":"177"},[2129,2131],"[fetchModules, toggle]",[2760,2762],[2765,2767]]